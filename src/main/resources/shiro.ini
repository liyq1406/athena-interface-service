
authc = com.toft.authority.AthenaFormAuthenticationFilter
roles = com.toft.authority.ToftRolesAuthorizationFilter
#org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
myRealm = com.toft.authority.AthenaRealm

authenticationStrategy = com.toft.authority.LoginSuccessfulStrategy 
securityManager.authenticator.authenticationStrategy = $authenticationStrategy
[users]
# format: username = password, role1, role2, ..., roleN
root = secret,admin
guest = guest,guest
presidentskroob = 12345,president
darkhelmet = ludicrousspeed,darklord,schwartz
lonestarr = vespa,goodguy,schwartz

[roles]
# format; roleName = permission1, permission2, ..., permissionN
admin = *
schwartz = lightsaber:*
goodguy = winnebago:drive:eagle5

[filters]
shiro.loginUrl = /login.jsp

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc

/** = authc,roles[admin]
#/account/** = authc
#/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]

#myRealm.authorizationCachingEnabled = true
#cache=org.apache.shiro.cache.ehcache.EhCacheManager
#myRealm.cacheManager=$cache
